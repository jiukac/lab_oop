/**
 * This class represents a single step in a path generated by the A* pathfinding
 * algorithm.  Waypoints consist of a location, the previous waypoint in the
 * path, and some cost values used to determine the best path.
 * * Этот класс представляет собой единственный шаг в пути, созданном поиском пути A *
  * алгоритм. Путевые точки состоят из местоположения, предыдущая путевая точка в
  * path, и некоторые значения стоимости, используемые для определения наилучшего пути.
 **/
public class Waypoint
{
    /** The location of this waypoint. Расположение этой путевой точки. **/
    Location loc;

    /**
     * The previous waypoint in this path, or <code>null</code> if this is
     * the root of the A* search.
     * * Предыдущая путевая точка на этом пути или <code> null </code>, если это
      * корень поиска A *.
     **/
    Waypoint prevWaypoint;

    /**
     * This field stores the total previous cost of getting from the starting
     * location to this waypoint, through the chain of waypoints.  This is an
     * actual cost of following the path; it does not include any estimates.
     * * В этом поле хранится общая предыдущая стоимость получения с начала
      * местоположение этой путевой точки через цепочку путевых точек. Это
      * фактическая стоимость следования по пути; он не включает никаких оценок.
     **/
    private float prevCost;

    /**
     * This field stores an estimate of the remaining cost of traveling from
     * this waypoint to the final destination.
     * * В этом поле хранится оценка оставшейся стоимости поездки из
      * эта путевая точка до конечного пункта назначения.
     **/
    private float remainingCost;


    /**
     * Construct a new waypoint for the specified location.  A previous waypoint
     * can optionally be specified, or the reference can be <code>null</code> to
     * indicate that the waypoint is the start of the path.
     * * Постройте новую путевую точку для указанного места. Предыдущая путевая точка
      * можно указать необязательно, или ссылка может быть <code> null </code> для
      * указывают, что путевая точка является началом пути.
     **/
    public Waypoint(Location loc, Waypoint prevWaypoint)
    {
        this.loc = loc;
        this.prevWaypoint = prevWaypoint;
    }

    /** returns the location Rof the waypoint. возвращает местоположение путевой точки **/
    public Location getLocation()
    {
        return loc;
    }
    
    /**
     * Returns the previous waypoint in the path, or <code>null</code> if this
     * is the start of the path.
     * * Возвращает предыдущую путевую точку в пути или <code> null </code>, если это
      * - начало пути
     **/
    public Waypoint getPrevious()
    {
        return prevWaypoint;
    }
    
    /**
     * This mutator allows both the previous cost and the remaining cost to be
     * set in one method call.  Normally these values will be set at the same
     * time anyway.
     * * Этот мутатор позволяет изменять как предыдущую, так и оставшуюся стоимость.
      * установить за один вызов метода. Обычно эти значения будут равны
      * в любом случае время.
     **/
    public void setCosts(float prevCost, float remainingCost)
    {
        this.prevCost = prevCost;
        this.remainingCost = remainingCost;
    }

    /**
     * Returns the actual cost of getting to this point from the starting
     * location, through the series of waypoints in this chain.
     * * Возвращает фактическую стоимость перехода к этой точке с самого начала.
      * местоположение через серию путевых точек в этой цепочке.
     **/
    public float getPreviousCost()
    {
        return prevCost;
    }

    /**
     * Returns an estimate of the remaining cost of traveling from this
     * point to the final destination.
     * * Возвращает оценку оставшейся стоимости путешествия из этого
      * указать конечный пункт назначения.
     **/
    public float getRemainingCost()
    {
        return remainingCost;
    }

    /**
     * Returns the total cost estimate for this waypoint.  This includes the
     * actual cost of getting to this point from the starting location, plus
     * the estimate of the remaining cost of traveling from this point to
     * the final destination.
     * * Возвращает оценку общей стоимости данной путевой точки. Это включает
      * фактическая стоимость проезда к этой точке от места старта плюс
      * оценка оставшейся стоимости поездки от этого пункта до
      * пункт назначения.
     **/
    public float getTotalCost()
    {
        return prevCost + remainingCost;
    }
}

